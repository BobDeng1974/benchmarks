// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: capnp_service.capnp

#include "capnp_service.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<42> b_b06fe64f26aed999 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153, 217, 174,  38,  79, 230, 111, 176,
     20,   0,   0,   0,   3,   0,   0,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 135,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97, 112, 110,
    112,  83, 101, 114, 118, 105,  99, 101,
     66, 101, 110,  99, 104, 109,  97, 114,
    107,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    243, 243, 241, 103, 116, 104, 173, 166,
     29,  68, 126, 239,  92, 187, 140, 245,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    177, 139, 254,  35,  38, 214,   4, 240,
     78,  64,  26, 127, 167, 154, 233, 134,
     29,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  65, 110, 115, 119, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  66, 108, 111,  98,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b06fe64f26aed999 = b_b06fe64f26aed999.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b06fe64f26aed999[] = {
  &s_86e99aa77f1a404e,
  &s_a6ad687467f1f3f3,
  &s_f004d62623fe8bb1,
  &s_f58cbb5cef7e441d,
};
static const uint16_t m_b06fe64f26aed999[] = {0, 1};
const ::capnp::_::RawSchema s_b06fe64f26aed999 = {
  0xb06fe64f26aed999, b_b06fe64f26aed999.words, 42, d_b06fe64f26aed999, m_b06fe64f26aed999,
  4, 2, nullptr, nullptr, nullptr, { &s_b06fe64f26aed999, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a6ad687467f1f3f3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243, 243, 241, 103, 116, 104, 173, 166,
     42,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97, 112, 110,
    112,  83, 101, 114, 118, 105,  99, 101,
     66, 101, 110,  99, 104, 109,  97, 114,
    107,  46, 103, 101, 116,  65, 110, 115,
    119, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a6ad687467f1f3f3 = b_a6ad687467f1f3f3.words;
#if !CAPNP_LITE
static const uint16_t m_a6ad687467f1f3f3[] = {0};
static const uint16_t i_a6ad687467f1f3f3[] = {0};
const ::capnp::_::RawSchema s_a6ad687467f1f3f3 = {
  0xa6ad687467f1f3f3, b_a6ad687467f1f3f3.words, 36, nullptr, m_a6ad687467f1f3f3,
  0, 1, i_a6ad687467f1f3f3, nullptr, nullptr, { &s_a6ad687467f1f3f3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f58cbb5cef7e441d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     29,  68, 126, 239,  92, 187, 140, 245,
     42,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97, 112, 110,
    112,  83, 101, 114, 118, 105,  99, 101,
     66, 101, 110,  99, 104, 109,  97, 114,
    107,  46, 103, 101, 116,  65, 110, 115,
    119, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f58cbb5cef7e441d = b_f58cbb5cef7e441d.words;
#if !CAPNP_LITE
static const uint16_t m_f58cbb5cef7e441d[] = {0};
static const uint16_t i_f58cbb5cef7e441d[] = {0};
const ::capnp::_::RawSchema s_f58cbb5cef7e441d = {
  0xf58cbb5cef7e441d, b_f58cbb5cef7e441d.words, 36, nullptr, m_f58cbb5cef7e441d,
  0, 1, i_f58cbb5cef7e441d, nullptr, nullptr, { &s_f58cbb5cef7e441d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_f004d62623fe8bb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 139, 254,  35,  38, 214,   4, 240,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97, 112, 110,
    112,  83, 101, 114, 118, 105,  99, 101,
     66, 101, 110,  99, 104, 109,  97, 114,
    107,  46, 103, 101, 116,  66, 108, 111,
     98,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f004d62623fe8bb1 = b_f004d62623fe8bb1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f004d62623fe8bb1 = {
  0xf004d62623fe8bb1, b_f004d62623fe8bb1.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f004d62623fe8bb1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_86e99aa77f1a404e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78,  64,  26, 127, 167, 154, 233, 134,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97, 112, 110,
    112,  83, 101, 114, 118, 105,  99, 101,
     66, 101, 110,  99, 104, 109,  97, 114,
    107,  46, 103, 101, 116,  66, 108, 111,
     98,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86e99aa77f1a404e = b_86e99aa77f1a404e.words;
#if !CAPNP_LITE
static const uint16_t m_86e99aa77f1a404e[] = {0};
static const uint16_t i_86e99aa77f1a404e[] = {0};
const ::capnp::_::RawSchema s_86e99aa77f1a404e = {
  0x86e99aa77f1a404e, b_86e99aa77f1a404e.words, 36, nullptr, m_86e99aa77f1a404e,
  0, 1, i_86e99aa77f1a404e, nullptr, nullptr, { &s_86e99aa77f1a404e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::CapnpServiceBenchmark::GetAnswerParams,  ::CapnpServiceBenchmark::GetAnswerResults>
CapnpServiceBenchmark::Client::getAnswerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CapnpServiceBenchmark::GetAnswerParams,  ::CapnpServiceBenchmark::GetAnswerResults>(
      0xb06fe64f26aed999ull, 0, sizeHint);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::getAnswer(GetAnswerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp_service.capnp:CapnpServiceBenchmark", "getAnswer",
      0xb06fe64f26aed999ull, 0);
}
::capnp::Request< ::CapnpServiceBenchmark::GetBlobParams,  ::CapnpServiceBenchmark::GetBlobResults>
CapnpServiceBenchmark::Client::getBlobRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CapnpServiceBenchmark::GetBlobParams,  ::CapnpServiceBenchmark::GetBlobResults>(
      0xb06fe64f26aed999ull, 1, sizeHint);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::getBlob(GetBlobContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp_service.capnp:CapnpServiceBenchmark", "getBlob",
      0xb06fe64f26aed999ull, 1);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb06fe64f26aed999ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp_service.capnp:CapnpServiceBenchmark", interfaceId);
  }
}
::kj::Promise<void> CapnpServiceBenchmark::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getAnswer(::capnp::Capability::Server::internalGetTypedContext<
           ::CapnpServiceBenchmark::GetAnswerParams,  ::CapnpServiceBenchmark::GetAnswerResults>(context));
    case 1:
      return getBlob(::capnp::Capability::Server::internalGetTypedContext<
           ::CapnpServiceBenchmark::GetBlobParams,  ::CapnpServiceBenchmark::GetBlobResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp_service.capnp:CapnpServiceBenchmark",
          0xb06fe64f26aed999ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* CapnpServiceBenchmark::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetAnswerParams
#ifndef _MSC_VER
constexpr uint16_t CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetAnswerResults
#ifndef _MSC_VER
constexpr uint16_t CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetBlobParams
#ifndef _MSC_VER
constexpr uint16_t CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetBlobResults
#ifndef _MSC_VER
constexpr uint16_t CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



