// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: capnp_service.capnp

#ifndef CAPNP_INCLUDED_d4857e0f5efbe114_
#define CAPNP_INCLUDED_d4857e0f5efbe114_

#include <capnp/generated-header-support.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif // !CAPNP_LITE

#if CAPNP_VERSION != 5003
#error                                                                         \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b06fe64f26aed999);
CAPNP_DECLARE_SCHEMA(a6ad687467f1f3f3);
CAPNP_DECLARE_SCHEMA(f58cbb5cef7e441d);

} // namespace schemas
} // namespace capnp

struct CapnpServiceBenchmark {
  CapnpServiceBenchmark() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif // !CAPNP_LITE

  struct GetAnswerParams;
  struct GetAnswerResults;

#if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b06fe64f26aed999)
    static constexpr ::capnp::_::RawBrandedSchema const *brand =
        &schema->defaultBrand;
  };
#endif // !CAPNP_LITE
};

struct CapnpServiceBenchmark::GetAnswerParams {
  GetAnswerParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6ad687467f1f3f3, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand =
        &schema->defaultBrand;
#endif // !CAPNP_LITE
  };
};

struct CapnpServiceBenchmark::GetAnswerResults {
  GetAnswerResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f58cbb5cef7e441d, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand =
        &schema->defaultBrand;
#endif // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class CapnpServiceBenchmark::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef CapnpServiceBenchmark Calls;
  typedef CapnpServiceBenchmark Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own<::capnp::ClientHook> &&hook);
  template <typename _t,
            typename = ::kj::EnableIf<::kj::canConvert<_t *, Server *>()>>
  Client(::kj::Own<_t> &&server);
  template <typename _t,
            typename = ::kj::EnableIf<::kj::canConvert<_t *, Client *>()>>
  Client(::kj::Promise<_t> &&promise);
  Client(::kj::Exception &&exception);
  Client(Client &) = default;
  Client(Client &&) = default;
  Client &operator=(Client &other);
  Client &operator=(Client &&other);

  ::capnp::Request<::CapnpServiceBenchmark::GetAnswerParams,
                   ::CapnpServiceBenchmark::GetAnswerResults>
  getAnswerRequest(::kj::Maybe<::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class CapnpServiceBenchmark::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef CapnpServiceBenchmark Serves;

  ::kj::Promise<void>
  dispatchCall(uint64_t interfaceId, uint16_t methodId,
               ::capnp::CallContext<::capnp::AnyPointer, ::capnp::AnyPointer>
                   context) override;

protected:
  typedef ::CapnpServiceBenchmark::GetAnswerParams GetAnswerParams;
  typedef ::CapnpServiceBenchmark::GetAnswerResults GetAnswerResults;
  typedef ::capnp::CallContext<GetAnswerParams, GetAnswerResults>
      GetAnswerContext;
  virtual ::kj::Promise<void> getAnswer(GetAnswerContext context);

  ::kj::Promise<void> dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext<::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif // !CAPNP_LITE

class CapnpServiceBenchmark::GetAnswerParams::Reader {
public:
  typedef GetAnswerParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif // !CAPNP_LITE

  inline ::int32_t getNumber() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapnpServiceBenchmark::GetAnswerParams::Builder {
public:
  typedef GetAnswerParams Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::int32_t getNumber();
  inline void setNumber(::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapnpServiceBenchmark::GetAnswerParams::Pipeline {
public:
  typedef GetAnswerParams Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class CapnpServiceBenchmark::GetAnswerResults::Reader {
public:
  typedef GetAnswerResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif // !CAPNP_LITE

  inline ::int32_t getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapnpServiceBenchmark::GetAnswerResults::Builder {
public:
  typedef GetAnswerResults Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::int32_t getResult();
  inline void setResult(::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapnpServiceBenchmark::GetAnswerResults::Pipeline {
public:
  typedef GetAnswerResults Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline CapnpServiceBenchmark::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline CapnpServiceBenchmark::Client::Client(
    ::kj::Own<::capnp::ClientHook> &&hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline CapnpServiceBenchmark::Client::Client(::kj::Own<_t> &&server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline CapnpServiceBenchmark::Client::Client(::kj::Promise<_t> &&promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline CapnpServiceBenchmark::Client::Client(::kj::Exception &&exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline ::CapnpServiceBenchmark::Client &CapnpServiceBenchmark::Client::
operator=(Client &other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline ::CapnpServiceBenchmark::Client &CapnpServiceBenchmark::Client::
operator=(Client &&other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif // !CAPNP_LITE
inline ::int32_t
CapnpServiceBenchmark::GetAnswerParams::Reader::getNumber() const {
  return _reader.getDataField<::int32_t>(0 * ::capnp::ELEMENTS);
}

inline ::int32_t CapnpServiceBenchmark::GetAnswerParams::Builder::getNumber() {
  return _builder.getDataField<::int32_t>(0 * ::capnp::ELEMENTS);
}
inline void
CapnpServiceBenchmark::GetAnswerParams::Builder::setNumber(::int32_t value) {
  _builder.setDataField<::int32_t>(0 * ::capnp::ELEMENTS, value);
}

inline ::int32_t
CapnpServiceBenchmark::GetAnswerResults::Reader::getResult() const {
  return _reader.getDataField<::int32_t>(0 * ::capnp::ELEMENTS);
}

inline ::int32_t CapnpServiceBenchmark::GetAnswerResults::Builder::getResult() {
  return _builder.getDataField<::int32_t>(0 * ::capnp::ELEMENTS);
}
inline void
CapnpServiceBenchmark::GetAnswerResults::Builder::setResult(::int32_t value) {
  _builder.setDataField<::int32_t>(0 * ::capnp::ELEMENTS, value);
}

#endif // CAPNP_INCLUDED_d4857e0f5efbe114_
